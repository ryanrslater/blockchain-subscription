import type { NextPage, GetServerSideProps } from "next";
import React, { FC, useEffect, useState } from "react";
import { useRouter } from "next/router";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { Client } from "pg";
import Grid from "@mui/material/Grid";
import Button from "@mui/material/Button";
import Avatar from "@mui/material/Avatar";
import Collapse from "@mui/material/Collapse";
import CircularProgress from "@mui/material/CircularProgress";

import Tiers from "../components/Tiers";
import Content from "../components/Content";
import TopNavigationBar from "../components/TopNavigationBar";
//0x991d4BF206Ec205CC23BB1A851D0bF3F068b20A6

import contract from "../contracts/contract";

import { users } from "../types/users";

type TierProps = { title: string; description: string; price: string };

type UserProps = {
  coverPhoto: string;
  accountTitle: string;
  accountDescription: string;
  address: string;
  tiers: TierProps[];
};

// const userData: UserProps = {
//   coverPhoto:
//     "https://images.unsplash.com/photo-1502759683299-cdcd6974244f?auto=format&fit=crop&w=440&h=220&q=60",
//   accountTitle: "Ryan's Account",
//   address: "0xD3feCe23f799D87116cd9F7b38F7738753C481ed",
//   accountDescription:
//     "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam nulla nibh, semper ut erat sed, hendrerit accumsan turpis. Nullam sollicitudin vulputate ante ac tincidunt.",
//   tiers: [
//     { title: "entry", description: "entry one", price: "0.0001" },
//     { title: "inter", description: "tiner one", price: "0.0003" },
//   ],
// };

const tiers = [
  { title: "entry", description: "entry one", price: "0.0001" },
  { title: "inter", description: "tiner one", price: "0.0003" },
];

type UserPageProps = {
  account: string | null;
  setAccount: (state: string | null) => void;
  userDetails: users;
};

type ContentProps = {
  title: string;
  body: string;
  image: string;
  tier: string;
};

const exampleContent: ContentProps[] = [
  {
    tier: "1",
    title: "Tier 1",
    body: "Lorem ipsum dolor sit amet, consectetur adipiscing elit",
    image: "f",
  },
  {
    tier: "2",
    title: "Tier 2",
    body: "Lorem ipsum dolor sit amet, consectetur adipiscing elit",
    image: "f",
  },
];

type Permissions = { amount: string; tier: string; timestamp: number };

const UserPage: NextPage<UserPageProps> = ({
  userDetails,
  account,
  setAccount,
}) => {
  const [permissions, setPermissions] = useState<Permissions | null>(null);
  const [loading, setLoading] = useState<boolean>(true);

  const TierPricing = tiers.map((el: TierProps, index: number) => {
    if (!userDetails) return;
    return (
      <Tiers
        tier={index + 1}
        creator={userDetails.wallet_key}
        subscriber={account}
        key={el.title}
        title={el.title}
        description={el.description}
        price={el.price}
      />
    );
  });

  const contentMapped = exampleContent.map((el: ContentProps, i: number) => (
    <Content content={el} key={i} permissions={permissions} />
  ));

  const checkPermissions = async () => {
    if (!userDetails) return;
    const data = await contract.methods
      .Subscriptions(account, userDetails.wallet_key)
      .call();
    setLoading(false);
    setPermissions({
      amount: data.amount,
      tier: data.tier,
      timestamp: parseInt(data.timestamp),
    });
  };
  useEffect(() => {
    if (account) checkPermissions();
    if (!account) setLoading(false);
  }, [account]);
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <TopNavigationBar account={account} setAccount={setAccount} />
      <div
        style={
          userDetails && {
            backgroundImage: `url("${userDetails.cover_picture}")`,
            height: "350px",
            backgroundPosition: "center",
            backgroundRepeat: "no-repeat",
            backgroundSize: "cover",
          }
        }
      />
      <Grid sx={{ mt: 2 }} container spacing={2}>
        <Grid xs={4} item>
          {userDetails && (
            <div style={{ display: "flex", justifyContent: "flex-end" }}>
              <div
                style={{
                  width: "60%",
                  display: "flex",
                  flexDirection: "column",
                  alignItems: "center",
                }}
              >
                <Avatar src={userDetails.profile_picture} />
                <h4>{userDetails.title}</h4>
                <p style={{ textAlign: "center" }}>{userDetails.bio}</p>
              </div>
            </div>
          )}
        </Grid>
        <Grid xs={4} item>
          <div
            style={{
              border: "1px solid #dbdbdb",
              borderRadius: "4px",
              padding: "10px 10px 0 10px",
            }}
          >
            {loading && (
              <div
                style={{
                  display: "flex",
                  justifyContent: "center",
                  paddingTop: "20px",
                  paddingBottom: "20px",
                }}
              >
                <CircularProgress />
              </div>
            )}
            <Collapse in={!loading}>
              <div>{contentMapped}</div>
            </Collapse>
          </div>
        </Grid>
        <Grid xs={4} item>
          <div style={{ width: "60%" }}>
            <div
              style={{
                border: "1px solid #dbdbdb",
                borderRadius: "4px",
                padding: "10px",
              }}
            >
              {TierPricing}
            </div>
          </div>
        </Grid>
      </Grid>
    </div>
  );
};

export const getServerSideProps: GetServerSideProps = async ({ params }) => {
  const id = params?.id;
  const portNum = parseInt(process.env.PGPORT ? process.env.PGPORT : "");
  const client = new Client({
    user: process.env.PGUSER,
    host: process.env.PGHOST,
    database: process.env.PGDATABASE,
    password: process.env.PGPASSWORD,
    port: portNum,
  });
  client.connect();
  const query = {
    name: "fetch-user",
    text: "SELECT * FROM users WHERE slug = ($1)",
    values: [id],
  };
  try {
    const data = await client.query(query);

    return {
      props: { userDetails: data.rows[0] },
    };
  } catch (err) {
    console.log(err);
    return {
      props: { error: "error" },
    };
  } finally {
    client.end();
  }
};

export default UserPage;
